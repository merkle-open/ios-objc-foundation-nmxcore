{"Functions.html#/c:@F@NMXLogWithPrefixAndArguments":{"name":"NMXLogWithPrefixAndArguments","abstract":"<p>Wrapper function to support Logging-Functionality. You could also define a NMXLogLevel, if you want the log also being logged with a specific Prefix</p>"},"Functions.html#/c:@F@NMXLog#*$objc(cs)NSString.#":{"name":"NMXLog","abstract":"<p>Wrapper function to support Logging-Functionality. You could also define a NMXLogLevel, if you want the log also being logged with a specific</p>"},"Functions.html#/c:@F@NMXLog#$@E@NMXLogLevelType#*$objc(cs)NSString.#":{"name":"NMXLog","abstract":"<p>Wrapper function to support Logging-Functionality. You could also define a NMXLogLevel, if you want the log also being logged with a specific</p>"},"Functions.html#/c:@F@NMXLogWithPrefix":{"name":"NMXLogWithPrefix","abstract":"<p>Wrapper function to support Logging-Functionality. You could also define a NMXLogLevel, if you want the log also being logged with a specific Prefix</p>"},"Functions.html#/c:@F@filePathForFile#*$objc(cs)NSString#S0_#*$objc(cs)NSBundle#":{"name":"filePathForFile","abstract":"<p>Provides an absolute filePath within a given bundle of a filename and its related fileExtension</p>"},"Functions.html#/c:@F@filePathForFile#*$objc(cs)NSString#*$objc(cs)NSBundle#":{"name":"filePathForFile","abstract":"<p>Provides an absolute filePath within a given bundle of a given filename</p>"},"Functions.html#/c:@F@filePathForFile#*$objc(cs)NSString#":{"name":"filePathForFile","abstract":"<p>Provides an absolute filePath within the mainBundle of a given filename</p>"},"Enums/NMXLogLevelType.html#/c:@E@NMXLogLevelType@none":{"name":"none","abstract":"<p>Undocumented</p>","parent_name":"NMXLogLevelType"},"Enums/NMXLogLevelType.html#/c:@E@NMXLogLevelType@debug":{"name":"debug","abstract":"<p>Undocumented</p>","parent_name":"NMXLogLevelType"},"Enums/NMXLogLevelType.html#/c:@E@NMXLogLevelType@release":{"name":"release","abstract":"<p>Undocumented</p>","parent_name":"NMXLogLevelType"},"Enums/NMXLogLevelType.html#/c:@E@NMXLogLevelType@all":{"name":"all","abstract":"<p>Undocumented</p>","parent_name":"NMXLogLevelType"},"Enums/NMXLogLevelType.html":{"name":"NMXLogLevelType","abstract":"<p>Example enum description</p>"},"Constants.html#/c:@NMXLogLevelTypeDescription":{"name":"NMXLogLevelTypeDescription","abstract":"<p>Undocumented</p>"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(py)availableLanguages":{"name":"availableLanguages","abstract":"<p>By default all available languages of the project are being used as available language for localization options. (Project Settings -&gt; Project -&gt; Info -&gt; Localizations)</p>","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(py)fallbackLanguage":{"name":"fallbackLanguage","abstract":"<p>set this value, in case you don&rsquo;t want the user&rsquo;s preferred Languages to be fallback, if the desiredLanguage is NOT provided in the availabe language file. If this property is set to <q>nil</q>, the default fallback will be a user&rsquo;s preferred Language Setting <code>[NSLocale preferredLanguages].firstObject</code>. If you want to force the LocalizationHandler to provide one of YOUR languages, set this value.</p>","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(py)language":{"name":"language","abstract":"<p>User&rsquo;s default selected language (and dialect), if you set this property, it will be matched with availableLanguages. If language was NOT included in availableLanguages, the language will be the fallbackLanguage!</p>","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(py)localizationFilePrefix":{"name":"localizationFilePrefix","abstract":"<p>We expect all localization files having the same prefix. You can set this prefix to your specific needs. By default it is: NMXDefaultLocalizationFilePrefix = @<q>default_</q>;</p>","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(im)initWithLocalizationFilePrefix:":{"name":"-initWithLocalizationFilePrefix:","abstract":"<p>returns an instance of NMXLocalizationHandler with a specified localizationFilePrefix;</p>","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(im)init":{"name":"-init","abstract":"<div class=\"aside aside-attention\">","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(cm)new":{"name":"+new","abstract":"<div class=\"aside aside-attention\">","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(cm)sharedInstance":{"name":"+sharedInstance","abstract":"<p>returns a shared instance of NMXLocalizationHandler</p>","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(cm)localizedLabelsFromBundleFile":{"name":"+localizedLabelsFromBundleFile","abstract":"<p>returns a dictionary with localized keys and the mapped localized value for the current language</p>","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(im)bestMatchingLanguage:":{"name":"-bestMatchingLanguage:","abstract":"<p>The functions maps the given input to the available Localizations based on the current bundle (readonly and by default NSBundle.mainBundle).</p>","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html#/c:objc(cs)NMXLocalizationHandler(cm)setupLocalizationWithFilePrefix:availableLanguages:preferredLanguage:":{"name":"+setupLocalizationWithFilePrefix:availableLanguages:preferredLanguage:","abstract":"<p>This function shall be used to setup/reset the entire NMXLocalizationHandler instance. You can set all required properties in one and don&rsquo;t have to set each property on its own.</p>","parent_name":"NMXLocalizationHandler"},"Classes/NMXLocalizationHandler.html":{"name":"NMXLocalizationHandler","abstract":"<p>Undocumented</p>"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)isUrlFormat":{"name":"isUrlFormat","abstract":"<p>checks, whether the string is convertible to NSURL and/or custom scheme - anything would be valid, empty string are considered being invalid</p>","parent_name":"NSString(NMX)"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)urlEncoded":{"name":"urlEncoded","abstract":"<p>escapes a string and its special characters like (<q>/</q> or <q>+</q> etc.), which would mess up in an url and escapes these, like a browser would do for example.</p>","parent_name":"NSString(NMX)"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)dateFormatISO8601":{"name":"dateFormatISO8601","abstract":"<p>if string is in the following date format: <q>yyyy-MM-dd&rsquo;T'HH:mm:ssZZZZZ</q>, returns a NSDate Object</p>","parent_name":"NSString(NMX)"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)isDateFormatISO8601":{"name":"isDateFormatISO8601","abstract":"<p>returns true, if string is in the following date format: <q>yyyy-MM-dd&rsquo;T'HH:mm:ssZZZZZ</q></p>","parent_name":"NSString(NMX)"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)dateFormatFourDigitYearMonthDay":{"name":"dateFormatFourDigitYearMonthDay","abstract":"<p>if string is in the following date format: <q>yyyy-MM-dd</q>, returns a NSDate Object</p>","parent_name":"NSString(NMX)"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)isDateFormatFourDigitYearMonthDay":{"name":"isDateFormatFourDigitYearMonthDay","abstract":"<p>returns true, if string is in the following date format: <q>yyyy-MM-dd</q></p>","parent_name":"NSString(NMX)"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)dateFormatLeadingZeroHoursMinutesSeconds":{"name":"dateFormatLeadingZeroHoursMinutesSeconds","abstract":"<p>if string is in the following date format: <q>HH:mm:ss</q>, returns a NSDate Object</p>","parent_name":"NSString(NMX)"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)isDateFormatLeadingZeroHoursMinutesSeconds":{"name":"isDateFormatLeadingZeroHoursMinutesSeconds","abstract":"<p>returns true, if string is in the following date format: <q>HH:mm:ss</q></p>","parent_name":"NSString(NMX)"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)stripNonAlphanumericChars":{"name":"stripNonAlphanumericChars","abstract":"<p>Returns a string without non alphanumeric characters</p>","parent_name":"NSString(NMX)"},"Categories/NSString(NMX).html#/c:objc(cs)NSString(py)stripNonAsciiChars":{"name":"stripNonAsciiChars","abstract":"<p>Returns a string with printable ASCII characters in range [32, 126] only</p>","parent_name":"NSString(NMX)"},"Categories/NSNumber(NMX).html#/c:objc(cs)NSNumber(py)isPositive":{"name":"isPositive","abstract":"<p>true, if object &gt; 0</p>","parent_name":"NSNumber(NMX)"},"Categories/NSNumber(NMX).html#/c:objc(cs)NSNumber(py)isPositiveOrZero":{"name":"isPositiveOrZero","abstract":"<p>true, if object &gt;= 0</p>","parent_name":"NSNumber(NMX)"},"Categories/NSDictionary(NMX).html#/c:objc(cs)NSDictionary(cm)dictionaryWithPlistFile:bundle:":{"name":"+dictionaryWithPlistFile:bundle:","abstract":"<p>Constructs an NSDictionary from a given json filename in the given bundle</p>","parent_name":"NSDictionary(NMX)"},"Categories/NSDictionary(NMX).html#/c:objc(cs)NSDictionary(cm)dictionaryWithJSONFile:bundle:":{"name":"+dictionaryWithJSONFile:bundle:","abstract":"<p>Constructs an NSDictionary from a given json filename in the given bundle</p>","parent_name":"NSDictionary(NMX)"},"Categories/NSDate(NMX).html#/c:objc(cs)NSDate(im)offsetInMonths:":{"name":"-offsetInMonths:","abstract":"<p>Constructs a NSDate from self with a given offset in months</p>","parent_name":"NSDate(NMX)"},"Categories/NSDate(NMX).html#/c:objc(cs)NSDate(im)offsetInDays:":{"name":"-offsetInDays:","abstract":"<p>Constructs a NSDate from self with a given offset in days</p>","parent_name":"NSDate(NMX)"},"Categories/NSDate(NMX).html#/c:objc(cs)NSDate(im)offsetInMinutes:":{"name":"-offsetInMinutes:","abstract":"<p>Constructs a NSDate from self with a given offset in minutes</p>","parent_name":"NSDate(NMX)"},"Categories/NSDate(NMX).html#/c:objc(cs)NSDate(im)offsetInSeconds:":{"name":"-offsetInSeconds:","abstract":"<p>Constructs a NSDate from self with a given offset in seconds</p>","parent_name":"NSDate(NMX)"},"Categories/NSDate(NMX).html#/c:objc(cs)NSDate(py)oneSecondBeforeEndOfDate":{"name":"oneSecondBeforeEndOfDate","abstract":"<p>Returns the same day, but the time is altered and is 23h 59min 59s. One second before midnight)</p>","parent_name":"NSDate(NMX)"},"Categories/NSDate(NMX).html":{"name":"NSDate(NMX)","abstract":"<p>Undocumented</p>"},"Categories/NSDictionary(NMX).html":{"name":"NSDictionary(NMX)","abstract":"<p>Undocumented</p>"},"Categories/NSNumber(NMX).html":{"name":"NSNumber(NMX)","abstract":"<p>Undocumented</p>"},"Categories/NSString(NMX).html":{"name":"NSString(NMX)","abstract":"<p>Undocumented</p>"},"Categories.html":{"name":"Categories","abstract":"<p>The following categories are available globally.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Constants.html":{"name":"Constants","abstract":"<p>The following constants are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"}}